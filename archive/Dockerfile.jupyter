# 🐳 Dockerfile for Cloud-Optimized Jupyter Environment
# Multi-scale Vision Transformer for Medical Imaging

FROM python:3.12-slim

# Metadata
LABEL maintainer="Ali Serwat <ali.servat79@gmail.com>"
LABEL description="Refactored DuoFormer - Cloud-optimized Jupyter environment"
LABEL version="1.0"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Set work directory
WORKDIR /workspace

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    wget \
    build-essential \
    libgl1 \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender1 \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Upgrade pip and install pip-tools
RUN pip install --upgrade pip pip-tools

# Copy requirements files
COPY requirements.in requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional Jupyter extensions for better UX (compatible versions)
RUN pip install --no-cache-dir \
    jupyterlab-git \
    jupyterlab-code-formatter \
    jupyterlab-widgets \
    jupyterlab-lsp \
    jupyterlab-snippets \
    ipywidgets \
    widgetsnbextension

# Configure Jupyter for cloud environments
RUN mkdir -p ~/.jupyter && \
    echo "c.ServerApp.ip = '0.0.0.0'" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.open_browser = False" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.allow_root = True" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.allow_remote_access = True" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.disable_check_xsrf = True" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.token = ''" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.password = ''" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.base_url = '/'" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.allow_origin = '*'" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.ServerApp.iopub_data_rate_limit = 1000000000" >> ~/.jupyter/jupyter_lab_config.py && \
    echo "c.NotebookApp.iopub_data_rate_limit = 1000000000" >> ~/.jupyter/jupyter_lab_config.py

# Note: Widgets are automatically enabled in JupyterLab 4.x
# No need for nbextension commands

# Copy project files
COPY . .

# Create directories for outputs
RUN mkdir -p logs checkpoints data

# Set permissions
RUN chmod +x scripts/*.py 2>/dev/null || true

# Expose Jupyter port
EXPOSE 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8888/ || exit 1

# Create startup script
RUN echo '#!/bin/bash\n\
echo "🌐" + "=" * 60\n\
echo "🚀 DUOFORMER JUPYTER CONTAINER"\n\
echo "🌐" + "=" * 60\n\
echo "🔍 Environment: Docker Container"\n\
echo "🔌 Port: 8888"\n\
echo "📁 Workspace: /workspace"\n\
echo ""\n\
echo "📋 Access Instructions:"\n\
echo "1. 🌐 Access: http://localhost:8888"\n\
echo "2. 📓 Open: demo_duoformer.ipynb"\n\
echo "3. 🚀 Start exploring DuoFormer!"\n\
echo ""\n\
echo "💡 Available notebooks:"\n\
ls -la *.ipynb 2>/dev/null || echo "   No notebooks found"\n\
echo ""\n\
echo "🚀 Starting JupyterLab..."\n\
echo "🌐" + "=" * 60\n\
exec jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --notebook-dir=/workspace' > /start_jupyter.sh && \
    chmod +x /start_jupyter.sh

# Default command
CMD ["/start_jupyter.sh"]
